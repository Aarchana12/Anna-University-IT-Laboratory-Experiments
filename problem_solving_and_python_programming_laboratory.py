# -*- coding: utf-8 -*-
"""Problem Solving and Python  Programming Laboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17azaV7Xn_VKgNe4Y_ClIfJboYuXgF3iL

Identification and solving of simple real life or scientific or technical problems, and developing flow charts for the same. (Electricity Billing, Retail shop billing, Sin series, weight of a motorbike, Weight of a steel bar, compute Electrical Current in Three Phase AC Circuit,
etc.)
"""

def calculate_electricity_bill(units_consumed):
    # Assume a simple rate for electricity
    rate_per_unit = 0.12
    total_bill = units_consumed * rate_per_unit
    return total_bill

# Example usage
units_consumed = float(input("Enter units consumed: "))
total_bill = calculate_electricity_bill(units_consumed)
print(f"Total Electricity Bill: ${total_bill}")

def calculate_retail_bill(items):
    # Assuming a simple pricing for items
    item_prices = {"item1": 10, "item2": 20, "item3": 15}

    total_bill = sum(item_prices[item] * quantity for item, quantity in items.items())
    return total_bill

# Example usage
items = {"item1": 2, "item2": 3, "item3": 1}
total_bill = calculate_retail_bill(items)
print(f"Total Retail Bill: ${total_bill}")

import math

def compute_sin_series(x, n_terms):
    # Compute sin(x) using Taylor series
    result = 0
    for i in range(n_terms):
        term = ((-1) ** i) * (x ** (2 * i + 1)) / math.factorial(2 * i + 1)
        result += term
    return result

# Example usage
angle = float(input("Enter the angle in radians: "))
terms = int(input("Enter the number of terms: "))
sin_value = compute_sin_series(angle, terms)
print(f"sin({angle}) = {sin_value}")

def calculate_motorbike_weight(weight_frame, weight_engine):
    total_weight = weight_frame + weight_engine
    return total_weight

# Example usage
weight_frame = float(input("Enter the weight of the frame: "))
weight_engine = float(input("Enter the weight of the engine: "))
total_weight = calculate_motorbike_weight(weight_frame, weight_engine)
print(f"Total Weight of Motorbike: {total_weight} kg")

def calculate_steel_bar_weight(length, diameter):
    # Assuming a simple density for steel
    steel_density = 7.85  # in g/cm^3
    volume = math.pi * (diameter / 2) ** 2 * length
    weight = volume * steel_density / 1000  # Convert g to kg
    return weight

# Example usage
length = float(input("Enter the length of the steel bar (cm): "))
diameter = float(input("Enter the diameter of the steel bar (cm): "))
steel_weight = calculate_steel_bar_weight(length, diameter)
print(f"Weight of Steel Bar: {steel_weight} kg")

def calculate_current(power, voltage, power_factor):
    # Calculate current in a three-phase AC circuit
    current = power / (math.sqrt(3) * voltage * power_factor)
    return current

# Example usage
power = float(input("Enter power (W): "))
voltage = float(input("Enter voltage (V): "))
power_factor = float(input("Enter power factor: "))
current = calculate_current(power, voltage, power_factor)
print(f"Current in Three-Phase AC Circuit: {current} A")

"""Python programming using simple statements and expressions (exchange the values of two variables, circulate the values of n variables, distance between two points)."""

# Exchange the values of two variables
a = 5
b = 10

print("Before swapping: a =", a, "b =", b)

# Using a temporary variable
temp = a
a = b
b = temp

print("After swapping: a =", a, "b =", b)

# Circulate the values of n variables
var1 = 1
var2 = 2
var3 = 3

print("Before circulation: var1 =", var1, "var2 =", var2, "var3 =", var3)

# Circulating values
temp = var1
var1 = var2
var2 = var3
var3 = temp

print("After circulation: var1 =", var1, "var2 =", var2, "var3 =", var3)

# Calculate the distance between two points
x1, y1 = 1, 2
x2, y2 = 4, 6

distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5

print(f"Distance between points ({x1}, {y1}) and ({x2}, {y2}): {distance}")

"""Scientific problems using Conditionals and Iterative loops. (Number series, Number Patterns, pyramid pattern)"""

# Generate Fibonacci series up to n terms
n = int(input("Enter the number of terms for Fibonacci series: "))
a, b = 0, 1

print("Fibonacci Series:")
for _ in range(n):
    print(a, end=" ")
    a, b = b, a + b

# Generate prime numbers up to a given limit
limit = int(input("Enter the limit for prime numbers: "))

print("Prime Numbers:")
for num in range(2, limit + 1):
    is_prime = True
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            is_prime = False
            break
    if is_prime:
        print(num, end=" ")

# Print a number triangle pattern
rows = int(input("Enter the number of rows for the triangle: "))

print("Number Triangle:")
for i in range(1, rows + 1):
    for j in range(1, i + 1):
        print(j, end=" ")
    print()

# Generate Pascal's Triangle
def generate_pascals_triangle(rows):
    triangle = [[1] * (i + 1) for i in range(rows)]

    for i in range(2, rows):
        for j in range(1, i):
            triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j]

    return triangle

rows = int(input("Enter the number of rows for Pascal's Triangle: "))
pascals_triangle = generate_pascals_triangle(rows)

print("Pascal's Triangle:")
for row in pascals_triangle:
    print(" ".join(map(str, row)))

# Print a number pyramid pattern
levels = int(input("Enter the number of levels for the pyramid: "))

print("Number Pyramid:")
for i in range(1, levels + 1):
    print(" " * (levels - i) + " ".join(map(str, range(1, i + 1))) + " ".join(map(str, range(i - 1, 0, -1))))

"""Implementing real-time/technical applications using Lists, Tuples. (Items present in a library/Components of a car/ Materials required for construction of a building â€“operations of list & tuples)"""

# Library Inventory Management

library_inventory = ["Book1", "Book2", "Magazine1", "CD1", "DVD2"]

# Function to display all items in the library
def display_library_inventory():
    print("Library Inventory:")
    for item in library_inventory:
        print(item)

# Function to add a new item to the library
def add_item_to_library(item):
    library_inventory.append(item)
    print(f"{item} has been added to the library.")

# Function to remove an item from the library
def remove_item_from_library(item):
    if item in library_inventory:
        library_inventory.remove(item)
        print(f"{item} has been removed from the library.")
    else:
        print(f"{item} is not present in the library.")

# Display initial inventory
display_library_inventory()

# Add a new book to the library
add_item_to_library("Book3")

# Remove a magazine from the library
remove_item_from_library("Magazine1")

# Display updated inventory
display_library_inventory()

# Car Components Information

car_components = (
    "Engine",
    "Transmission",
    "Suspension System",
    "Brake System",
    "Electrical System",
)

# Function to display all components of a car
def display_car_components():
    print("Car Components:")
    for component in car_components:
        print(component)

# Function to get information about a specific car component
def get_component_info(component):
    if component in car_components:
        print(f"Information about {component}: [Placeholder information]")
    else:
        print(f"{component} is not a valid car component.")

# Display initial car components
display_car_components()

# Get information about the Engine
get_component_info("Engine")

# Get information about a non-existent component
get_component_info("Tires")

# Building Construction Materials

construction_materials = [
    ("Cement", 1000),
    ("Bricks", 5000),
    ("Steel Bars", 200),
    ("Concrete Blocks", 1000),
]

# Function to display all construction materials
def display_construction_materials():
    print("Construction Materials:")
    for material, quantity in construction_materials:
        print(f"{material}: {quantity} units")

# Function to update the quantity of a construction material
def update_material_quantity(material, new_quantity):
    for i, (m, _) in enumerate(construction_materials):
        if m == material:
            construction_materials[i] = (m, new_quantity)
            print(f"{material} quantity updated to {new_quantity} units.")
            return
    print(f"{material} is not present in the construction materials.")

# Display initial construction materials
display_construction_materials()

# Update the quantity of Cement
update_material_quantity("Cement", 1200)

# Add a new material to the construction materials
construction_materials.append(("Glass", 300))

# Display updated construction materials
display_construction_materials()

"""Implementing real-time/technical applications using Sets, Dictionaries. (Language, components of an automobile, Elements of a civil structure, etc.- operations of Sets & Dictionaries)

"""

# Language Information Dictionary

language_info = {
    "Python": {"Designed by": "Guido van Rossum", "Year": 1991, "Type": "High-level"},
    "JavaScript": {"Designed by": "Brendan Eich", "Year": 1995, "Type": "Scripting"},
    "Java": {"Designed by": "James Gosling", "Year": 1995, "Type": "Compiled"},
}

# Function to display information about a programming language
def display_language_info(language):
    if language in language_info:
        print(f"Information about {language}:")
        for key, value in language_info[language].items():
            print(f"{key}: {value}")
    else:
        print(f"{language} is not present in the language information.")

# Function to add a new language to the dictionary
def add_language_info(language, designer, year, language_type):
    language_info[language] = {"Designed by": designer, "Year": year, "Type": language_type}
    print(f"{language} has been added to the language information.")

# Display information about Python
display_language_info("Python")

# Add information about a new language
add_language_info("Ruby", "Yukihiro Matsumoto", 1995, "Scripting")

# Display updated language information
display_language_info("Ruby")

# Components of an Automobile Set

automobile_components = {"Engine", "Transmission", "Suspension System", "Brake System", "Electrical System"}

# Function to display all components of an automobile
def display_automobile_components():
    print("Automobile Components:")
    for component in automobile_components:
        print(component)

# Function to add a new component to the set
def add_component_to_automobile(component):
    automobile_components.add(component)
    print(f"{component} has been added to the automobile components.")

# Function to remove a component from the set
def remove_component_from_automobile(component):
    if component in automobile_components:
        automobile_components.remove(component)
        print(f"{component} has been removed from the automobile components.")
    else:
        print(f"{component} is not present in the automobile components.")

# Display initial automobile components
display_automobile_components()

# Add a new component to the set
add_component_to_automobile("Air Conditioning System")

# Remove a component from the set
remove_component_from_automobile("Suspension System")

# Display updated automobile components
display_automobile_components()

# Elements of a Civil Structure Dictionary

civil_structure_elements = {
    "Foundation": {"Material": "Concrete", "Depth": "10 meters", "Type": "Shallow"},
    "Columns": {"Material": "Steel", "Height": "5 meters", "Type": "Reinforced"},
    "Roof": {"Material": "Bricks", "Type": "Sloping"},
}

# Function to display information about an element of a civil structure
def display_civil_structure_element(element):
    if element in civil_structure_elements:
        print(f"Information about {element}:")
        for key, value in civil_structure_elements[element].items():
            print(f"{key}: {value}")
    else:
        print(f"{element} is not present in the civil structure elements.")

# Function to update information about an element in the dictionary
def update_civil_structure_element(element, attribute, new_value):
    if element in civil_structure_elements and attribute in civil_structure_elements[element]:
        civil_structure_elements[element][attribute] = new_value
        print(f"{attribute} of {element} updated to {new_value}.")
    else:
        print(f"{element} or {attribute} is not present in the civil structure elements.")

# Display information about the Foundation
display_civil_structure_element("Foundation")

# Update the material of Columns
update_civil_structure_element("Columns", "Material", "Concrete")

# Display updated information about Columns
display_civil_structure_element("Columns")

"""Implementing programs using Functions. (Factorial, largest number in a list, area of shape)"""

def calculate_factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * calculate_factorial(n - 1)

# Example usage
number = int(input("Enter a number to calculate its factorial: "))
result = calculate_factorial(number)
print(f"The factorial of {number} is: {result}")

def find_largest_number(numbers):
    if not numbers:
        return None  # Return None for an empty list

    largest = numbers[0]
    for num in numbers:
        if num > largest:
            largest = num
    return largest

# Example usage
num_list = [5, 8, 2, 10, 3, 15, 7]
largest_number = find_largest_number(num_list)
print(f"The largest number in the list is: {largest_number}")

import math

def calculate_rectangle_area(length, width):
    return length * width

def calculate_circle_area(radius):
    return math.pi * radius**2

# Example usage
shape = input("Enter the shape (rectangle/circle): ").lower()

if shape == "rectangle":
    length = float(input("Enter the length of the rectangle: "))
    width = float(input("Enter the width of the rectangle: "))
    area = calculate_rectangle_area(length, width)
    print(f"The area of the rectangle is: {area}")
elif shape == "circle":
    radius = float(input("Enter the radius of the circle: "))
    area = calculate_circle_area(radius)
    print(f"The area of the circle is: {area}")
else:
    print("Invalid shape. Please enter either 'rectangle' or 'circle'.")

"""Implementing programs using Strings. (reverse, palindrome, character count, replacing characters)"""

def reverse_string(input_str):
    return input_str[::-1]

# Example usage
original_string = input("Enter a string: ")
reversed_string = reverse_string(original_string)
print(f"The reversed string is: {reversed_string}")

def is_palindrome(input_str):
    cleaned_str = ''.join(char.lower() for char in input_str if char.isalnum())
    return cleaned_str == cleaned_str[::-1]

# Example usage
word = input("Enter a word to check if it's a palindrome: ")
if is_palindrome(word):
    print(f"{word} is a palindrome.")
else:
    print(f"{word} is not a palindrome.")

def count_characters(input_str):
    char_count = {}
    for char in input_str:
        if char.isalpha():
            char_count[char] = char_count.get(char, 0) + 1
    return char_count

# Example usage
sentence = input("Enter a sentence: ")
character_count = count_characters(sentence)
print("Character count:")
for char, count in character_count.items():
    print(f"{char}: {count}")

def replace_characters(input_str, old_char, new_char):
    return input_str.replace(old_char, new_char)

# Example usage
original_text = input("Enter some text: ")
char_to_replace = input("Enter the character to replace: ")
replacement_char = input("Enter the replacement character: ")
modified_text = replace_characters(original_text, char_to_replace, replacement_char)
print(f"Modified text: {modified_text}")

"""Implementing programs using written modules and Python Standard Libraries (pandas, numpy. Matplotlib, scipy)"""

pip install pandas numpy matplotlib

import pandas as pd

# Read a CSV file into a pandas DataFrame
data = pd.read_csv('/content/sample_data/california_housing_test.csv')

# Display the DataFrame
print("Data from CSV file:")
print(data)

import numpy as np

# Create a NumPy array
data_array = np.array([2, 4, 6, 8, 10])

# Calculate mean and standard deviation
mean_value = np.mean(data_array)
std_deviation = np.std(data_array)

print(f"Mean: {mean_value}")
print(f"Standard Deviation: {std_deviation}")

import matplotlib.pyplot as plt

# Create data for plotting
x = [1, 2, 3, 4, 5]
y = [2, 4, 6, 8, 10]

# Plot the data
plt.plot(x, y)
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Simple Plot')
plt.show()

from scipy.linalg import solve

# Coefficients of the linear equations
coefficients = np.array([[2, 1], [1, -3]])
constants = np.array([8, 1])

# Solve the system of linear equations
solution = solve(coefficients, constants)

print(f"The solution to the system of equations is: {solution}")

"""Implementing real-time/technical applications using File handling. (copy from one file to another, word count, longest word)

"""

def copy_file(source_file, destination_file):
    try:
        with open(source_file, 'w') as source:
            source.write("This is the content of the source file.")

        with open(source_file, 'r') as source, open(destination_file, 'w') as destination:
            content = source.read()
            destination.write(content)

        print(f"Content copied from {source_file} to {destination_file} successfully.")
    except Exception as e:
        print(f"Error: {e}")

# Example usage
source_file_name = 'source.txt'
destination_file_name = 'destination.txt'
copy_file(source_file_name, destination_file_name)

def count_words(file_name):
    try:
        with open(file_name, 'w') as file:
            file.write("This is a sample sentence for word count.")

        with open(file_name, 'r') as file:
            content = file.read()
            words = content.split()
        return len(words)
    except Exception as e:
        print(f"Error: {e}")
        return 0

# Example usage
file_to_count = 'sample_text.txt'
word_count = count_words(file_to_count)
print(f"Word count in {file_to_count}: {word_count}")

def find_longest_word(file_name):
    try:
        with open(file_name, 'w') as file:
            file.write("This is an example to find the longest word in a file.")

        with open(file_name, 'r') as file:
            content = file.read()
            words = content.split()
        return max(words, key=len)
    except Exception as e:
        print(f"Error: {e}")
        return None

# Example usage
file_to_check = 'sample_text.txt'
longest_word = find_longest_word(file_to_check)
if longest_word:
    print(f"The longest word in {file_to_check} is: {longest_word}")
else:
    print("Could not find the longest word.")

"""Implementing real-time/technical applications using Exception handling. (divide by zero error, voterâ€™s age validity, student mark range validation)"""

def divide_numbers(a, b):
    try:
        result = a / b
        return result
    except ZeroDivisionError:
        print("Error: Cannot divide by zero.")
        return None

# Example usage
numerator = 10
denominator = 0
result = divide_numbers(numerator, denominator)

if result is not None:
    print(f"{numerator} divided by {denominator} is: {result}")
else:
    print("Error occurred.")

def check_voter_age(age):
    try:
        if age < 18:
            raise ValueError("Invalid Age: Voters must be at least 18 years old.")
        else:
            print("Voter age is valid.")
    except ValueError as e:
        print(f"Error: {e}")

# Example usage
voter_age = int(input("Enter the voter's age: "))
check_voter_age(voter_age)

def validate_student_marks(marks):
    try:
        if not (0 <= marks <= 100):
            raise ValueError("Invalid Marks: Marks must be between 0 and 100.")
        else:
            print("Student marks are valid.")
    except ValueError as e:
        print(f"Error: {e}")

# Example usage
student_marks = float(input("Enter the student's marks: "))
validate_student_marks(student_marks)

""" Exploring Pygame tool"""

import pygame
import sys

# Initialize Pygame
pygame.init()

# Set up the display
width, height = 800, 600
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("Simple Pygame Example")

# Set up colors
black = (0, 0, 0)
white = (255, 255, 255)

# Set up the player
player_size = 50
player_x = width // 2 - player_size // 2
player_y = height - 2 * player_size
player_speed = 5

# Main game loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # Get the keys that are currently pressed
    keys = pygame.key.get_pressed()

    # Move the player based on the keys
    if keys[pygame.K_LEFT] and player_x > 0:
        player_x -= player_speed
    if keys[pygame.K_RIGHT] and player_x < width - player_size:
        player_x += player_speed

    # Update the display
    screen.fill(black)
    pygame.draw.rect(screen, white, (player_x, player_y, player_size, player_size))

    pygame.display.flip()

    # Cap the frame rate
    pygame.time.Clock().tick(60)

import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Set up the display
width, height = 600, 800
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("Car Racing Game")

# Set up colors
black = (0, 0, 0)
white = (255, 255, 255)
red = (255, 0, 0)

# Set up other cars
other_cars = []
other_car_speed = 5
other_car_width = 50
other_car_height = 100

# Set up the font
font = pygame.font.Font(None, 36)

# Set up the player's car
car_width = 50
car_height = 100
car_x = width // 2 - car_width // 2
car_y = height - car_height - 20
car_speed = 10

# Main game loop
score = 0
clock = pygame.time.Clock()

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    keys = pygame.key.get_pressed()

    # Move the player's car
    if keys[pygame.K_LEFT] and car_x > 0:
        car_x -= car_speed
    if keys[pygame.K_RIGHT] and car_x < width - car_width:
        car_x += car_speed

    # Move other cars down the screen
    for car in other_cars:
        car[1] += other_car_speed

        # Check for collision with the player's car
        if (
            car_x < car[0] + other_car_width
            and car_x + car_width > car[0]
            and car_y < car[1] + other_car_height
            and car_y + car_height > car[1]
        ):
            print("Game Over!")
            pygame.quit()
            sys.exit()

        # Remove cars that go off the bottom of the screen
        if car[1] > height:
            other_cars.remove(car)
            score += 1

    # Generate a new car randomly
    if random.randint(0, 100) < 5:
        new_car_x = random.randint(0, width - other_car_width)
        new_car_y = 0 - other_car_height
        other_cars.append([new_car_x, new_car_y, other_car_width, other_car_height])

    # Update the display
    screen.fill(black)

    # Draw the player's car
    pygame.draw.rect(screen, red, (car_x, car_y, car_width, car_height))

    # Draw other cars
    for car in other_cars:
        pygame.draw.rect(screen, white, car)

    # Display the score
    score_text = font.render(f"Score: {score}", True, white)
    screen.blit(score_text, (10, 10))

    pygame.display.flip()

    # Cap the frame rate
    clock.tick(30)

import pygame
import sys

# Initialize Pygame
pygame.init()

# Set up the display
width, height = 800, 600
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("Bouncing Ball Game")

# Set up colors
black = (0, 0, 0)
white = (255, 255, 255)

# Set up the ball
ball_radius = 20
ball_x = width // 2
ball_y = height // 2
ball_speed_x = 5
ball_speed_y = 5

# Set up the paddle
paddle_width = 100
paddle_height = 20
paddle_x = (width - paddle_width) // 2
paddle_y = height - paddle_height - 10
paddle_speed = 10

# Main game loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # Move the paddle based on the keys
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and paddle_x > 0:
        paddle_x -= paddle_speed
    if keys[pygame.K_RIGHT] and paddle_x < width - paddle_width:
        paddle_x += paddle_speed

    # Move the ball
    ball_x += ball_speed_x
    ball_y += ball_speed_y

    # Bounce the ball off the walls
    if ball_x <= 0 or ball_x >= width - ball_radius * 2:
        ball_speed_x = -ball_speed_x
    if ball_y <= 0:
        ball_speed_y = -ball_speed_y

    # Bounce the ball off the paddle
    if paddle_x <= ball_x <= paddle_x + paddle_width and paddle_y <= ball_y <= paddle_y + paddle_height:
        ball_speed_y = -ball_speed_y

    # Check if the ball fell off the bottom of the screen
    if ball_y >= height:
        # Reset the ball position
        ball_x = width // 2
        ball_y = height // 2

    # Update the display
    screen.fill(black)
    pygame.draw.circle(screen, white, (ball_x, ball_y), ball_radius)
    pygame.draw.rect(screen, white, (paddle_x, paddle_y, paddle_width, paddle_height))

    pygame.display.flip()

    # Cap the frame rate
    pygame.time.Clock().tick(60)